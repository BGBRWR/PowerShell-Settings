<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-results xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="nunit_schema_2.5.xsd" name="Pester" total="25" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2018-01-29" time="19:29:23">
  <environment user="appveyor" machine-name="APPVEYOR-VM" cwd="C:\projects\oh-my-posh" user-domain="APPVEYOR-VM" platform="Microsoft Windows Server 2012 R2 Datacenter|C:\windows|\Device\Harddisk0\Partition1" nunit-version="2.5.8.0" os-version="6.3.9600" clr-version="4.0.30319.42000" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="TestFixture" name="Pester" executed="True" result="Success" success="True" time="2.8794" asserts="0" description="Pester">
    <results>
      <test-suite type="TestFixture" name="C:\projects\oh-my-posh\Helpers\Prompt.Tests.ps1" executed="True" result="Success" success="True" time="2.8794" asserts="0" description="C:\projects\oh-my-posh\Helpers\Prompt.Tests.ps1">
        <results>
          <test-suite type="TestFixture" name="Test-IsVanillaWindow" executed="True" result="Success" success="True" time="1.5947" asserts="0" description="Test-IsVanillaWindow">
            <results>
              <test-suite type="TestFixture" name="Running in a non-vanilla window" executed="True" result="Success" success="True" time="1.5329" asserts="0" description="Running in a non-vanilla window">
                <results>
                  <test-case description="runs in ConEmu and outputs 'false'" name="Test-IsVanillaWindow.Running in a non-vanilla window.runs in ConEmu and outputs 'false'" time="1.3586" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="runs in cmder and outputs 'false'" name="Test-IsVanillaWindow.Running in a non-vanilla window.runs in cmder and outputs 'false'" time="0.1002" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="runs in ConEmu and outputs 'false'" name="Test-IsVanillaWindow.Running in a non-vanilla window.runs in ConEmu and outputs 'false'" time="0.0159" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="runs in cmder and outputs 'false'" name="Test-IsVanillaWindow.Running in a non-vanilla window.runs in cmder and outputs 'false'" time="0.0257" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="runs in cmder and conemu and outputs 'false'" name="Test-IsVanillaWindow.Running in a non-vanilla window.runs in cmder and conemu and outputs 'false'" time="0.0189" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="runs in Hyper.js and outputs 'false'" name="Test-IsVanillaWindow.Running in a non-vanilla window.runs in Hyper.js and outputs 'false'" time="0.0136" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Running in a vanilla window" executed="True" result="Success" success="True" time="0.0618" asserts="0" description="Running in a vanilla window">
                <results>
                  <test-case description="runs in a vanilla window and outputs 'true'" name="Test-IsVanillaWindow.Running in a vanilla window.runs in a vanilla window and outputs 'true'" time="0.0618" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Home" executed="True" result="Success" success="True" time="0.0492" asserts="0" description="Get-Home">
            <results>
              <test-case description="returns C:\Users\appveyor" name="Get-Home.returns C:\Users\appveyor" time="0.0492" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Provider" executed="True" result="Success" success="True" time="0.3987" asserts="0" description="Get-Provider">
            <results>
              <test-case description="uses the provider 'AwesomeSauce'" name="Get-Provider.uses the provider 'AwesomeSauce'" time="0.3987" asserts="0" success="True" result="Success" executed="True" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Get-Drive" executed="True" result="Success" success="True" time="0.5115" asserts="0" description="Get-Drive">
            <results>
              <test-suite type="TestFixture" name="Running in the FileSystem" executed="True" result="Success" success="True" time="0.4464" asserts="0" description="Running in the FileSystem">
                <results>
                  <test-case description="is in the C:\Users\appveyor folder" name="Get-Drive.Running in the FileSystem.is in the C:\Users\appveyor folder" time="0.1685" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="is somewhere in the C:\Users\appveyor folder" name="Get-Drive.Running in the FileSystem.is somewhere in the C:\Users\appveyor folder" time="0.0752" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="is in 'Microsoft.PowerShell.Core\FileSystem::\\Test\Hello' with provider X:" name="Get-Drive.Running in the FileSystem.is in 'Microsoft.PowerShell.Core\FileSystem::\\Test\Hello' with provider X:" time="0.0851" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="is in C:" name="Get-Drive.Running in the FileSystem.is in C:" time="0.0357" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="is has no drive" name="Get-Drive.Running in the FileSystem.is has no drive" time="0.0453" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="is has no valid path" name="Get-Drive.Running in the FileSystem.is has no valid path" time="0.0366" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Running outside of the FileSystem" executed="True" result="Success" success="True" time="0.0651" asserts="0" description="Running outside of the FileSystem">
                <results>
                  <test-case description="running outside of the Filesystem in L:" name="Get-Drive.Running outside of the FileSystem.running outside of the Filesystem in L:" time="0.0651" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="Test-NotDefaultUser" executed="True" result="Success" success="True" time="0.3252" asserts="0" description="Test-NotDefaultUser">
            <results>
              <test-suite type="TestFixture" name="With default user set" executed="True" result="Success" success="True" time="0.2145" asserts="0" description="With default user set">
                <results>
                  <test-case description="same username gives 'false'" name="Test-NotDefaultUser.With default user set.same username gives 'false'" time="0.0939" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="different username gives 'false'" name="Test-NotDefaultUser.With default user set.different username gives 'false'" time="0.019" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="same username and outside VirtualEnv gives 'false'" name="Test-NotDefaultUser.With default user set.same username and outside VirtualEnv gives 'false'" time="0.0408" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="same username and inside VirtualEnv same default user gives 'true'" name="Test-NotDefaultUser.With default user set.same username and inside VirtualEnv same default user gives 'true'" time="0.0409" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="different username and inside VirtualEnv same default user gives 'true'" name="Test-NotDefaultUser.With default user set.different username and inside VirtualEnv same default user gives 'true'" time="0.0198" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="With no default user set" executed="True" result="Success" success="True" time="0.1107" asserts="0" description="With no default user set">
                <results>
                  <test-case description="no username gives 'true'" name="Test-NotDefaultUser.With no default user set.no username gives 'true'" time="0.0438" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="different username gives 'true'" name="Test-NotDefaultUser.With no default user set.different username gives 'true'" time="0.0201" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="different username and outside VirtualEnv gives 'true'" name="Test-NotDefaultUser.With no default user set.different username and outside VirtualEnv gives 'true'" time="0.0227" asserts="0" success="True" result="Success" executed="True" />
                  <test-case description="no username and inside VirtualEnv gives 'true'" name="Test-NotDefaultUser.With no default user set.no username and inside VirtualEnv gives 'true'" time="0.0241" asserts="0" success="True" result="Success" executed="True" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>